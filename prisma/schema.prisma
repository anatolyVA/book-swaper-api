generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid

  email    String @unique
  password String
  role     Role   @default(USER)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile  Profile?
  books    Book[]
  comments SwapComment[]

  @@map("users")
}

model Profile {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @map("user_id") @db.Uuid

  avatarUrl String? @map("avatar_url")
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  city      String
  country   String
  state     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Book {
  id       String @id @default(uuid()) @db.Uuid
  authorId String @map("author_id") @db.Uuid
  ownerId  String @map("owner_id") @db.Uuid

  title       String
  description String
  genre       Genre
  language    String
  coverType   CoverType     @map("cover_type")
  condition   BookCondition
  status      BookStatus    @default(AVAILABLE)

  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  owner  User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  swapsOffered   Swap[]      @relation("OfferedBooks")
  swapsRequested Swap[]      @relation("RequestedBooks")
  images         BookImage[]

  @@map("books")
}

model BookImage {
  id String @id @default(uuid()) @db.Uuid

  bookId    String  @db.Uuid
  isPreview Boolean @default(false) @map("is_preview")
  url       String

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("book_images")
}

model Swap {
  id String @id @default(uuid()) @db.Uuid

  offeringBookId  String @map("offering_book_id") @db.Uuid
  requestedBookId String @map("requested_book_id") @db.Uuid

  status SwapStatus @default(SENT)

  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  offeringBook  Book          @relation("OfferedBooks", fields: [offeringBookId], references: [id], onDelete: Cascade)
  requestedBook Book          @relation("RequestedBooks", fields: [requestedBookId], references: [id], onDelete: Cascade)
  comments      SwapComment[]

  @@unique([offeringBookId, requestedBookId])
  @@map("swaps")
}

model SwapComment {
  id     String @id @default(uuid()) @db.Uuid
  swapId String @db.Uuid
  userId String @db.Uuid

  content String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  swap Swap @relation(fields: [swapId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("swap_comments")
}

model Author {
  id String @id @default(uuid()) @db.Uuid

  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  patronym  String? @map("patronym")

  books Book[]

  @@map("authors")
}

enum Genre {
  FANTASY
  SCIENCE_FICTION
  ROMANCE
  MYSTERY
  THRILLER
  HORROR
  HISTORICAL
  ADVENTURE
  YOUNG_ADULT
}

enum CoverType {
  HARD_COVER
  PAPERBACK
  DUST_JACKET
  LEATHER_BOUND
  SPIRAL_BOUND
  OTHER
}

enum BookCondition {
  NEW
  LIKE_NEW
  VERY_GOOD
  GOOD
  ACCEPTABLE
  POOR
  EX_LIBRARY
  COLLECTORS_COPY
  BLINDING_COPY
  READING_COPY
}

enum Role {
  USER
  ADMIN
}

enum SwapStatus {
  SENT
  DECLINED
  ACCEPTED
  COMPLETED
}

enum BookStatus {
  AVAILABLE
  IN_SWAP
  SWAPPED
}
