generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid

  email    String @unique
  password String
  role     Role   @default(USER)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  basket    Basket?
  orders    Order[]

  @@map("users")
}

model Basket {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  basketItems BasketItems[]

  @@map("baskets")
}

model BasketItems {
  basketId String @map("basket_id") @db.Uuid
  coffeeId String @map("coffee_id") @db.Uuid

  quantity Int

  basket Basket @relation(fields: [basketId], references: [id], onDelete: Cascade)
  coffee Coffee @relation(fields: [coffeeId], references: [id], onDelete: Cascade)

  @@id([basketId, coffeeId])
  @@map("basket_items")
}

model Order {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid

  user   User   @relation(fields: [userId], references: [id])
  status Status @default(PLACED)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orderItems OrderItems[]

  @@map("orders")
}

model OrderItems {
  orderId  String @map("basket_id") @db.Uuid
  coffeeId String @map("coffee_id") @db.Uuid

  quantity Int

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  coffee Coffee @relation(fields: [coffeeId], references: [id], onDelete: Cascade)

  @@id([orderId, coffeeId])
  @@map("order_items")
}

model Coffee {
  id      String @id @default(uuid()) @db.Uuid
  beansId String @map("been_id") @db.Uuid

  title       String
  type        CoffeeType
  price       Decimal
  description String
  imageUrl    String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  beans       Beans         @relation(fields: [beansId], references: [id], onDelete: Cascade)
  basketItems BasketItems[]
  orderItems  OrderItems[]

  @@map("coffee")
}

model Beans {
  id             String @id @default(uuid()) @db.Uuid
  manufacturerId String @map("manufacturer_id") @db.Uuid

  title       String
  description String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  coffee Coffee[]

  @@map("been")
}

model Manufacturer {
  id String @id @default(uuid()) @db.Uuid

  title   String
  country String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  beans Beans[]

  @@map("manufacturers")
}

enum Status {
  PLACED
  PROCCESSING
  SHIPPED
  DELIVIRED
  CANCELED
}

enum Role {
  USER
  ADMIN
}

enum CoffeeType {
  LATTE
  ESPRESSO
  AMERICANO
  CAPPUCCINO
  MACCHIATO
  MOCHA
  FLAT_WHITE
  COLD_BREW
  POUR_OVER
  FRENCH_PRESS
  TURKISH
}
